/*
 * =====================================================================================
 *
 *       Filename: typedef.hpp
 *        Created: 12/28/2018 03:25:41
 *    Description: 
 *
 *        Version: 1.0
 *       Revision: none
 *       Compiler: gcc
 *
 *         Author: ANHONG
 *          Email: anhonghe@gmail.com
 *   Organization: USTC
 *
 * =====================================================================================
 */

#pragma once
#include "mpackinterf.hpp"
#include "constexprfunc.hpp"

namespace libnvc
{
    // don't modify
    // entries generated by jinja2

    constexpr static const char * g_nvim_api_string_tbl[]
    {
        // put the zero index as reserved
        nullptr,

        // requests
        "req::nvim_buf_line_count",
        "req::buffer_get_line",

        // notifications
        "notif::test",
    };

    inline constexpr const char *idstr(size_t id)
    {
        if(id == 0 || id >= std::extent<decltype(g_nvim_api_string_tbl)>::value){
            return nullptr;
        }
        return g_nvim_api_string_tbl[id];
    }

    inline constexpr size_t strid(const char *str)
    {
        if(str == nullptr){
            return 0;
        }

        for(size_t index = 1; index < std::extent<decltype(g_nvim_api_string_tbl)>::value; ++index){
            if(libnvc::constexpr_func::strcmp(str, g_nvim_api_string_tbl[index]) == 0){
                return index;
            }
        }
        return 0;
    }
}

namespace libnvc
{
    constexpr size_t strid(const char *prefix, const char *name)
    {
        char buf[512];
        libnvc::constexpr_func::memset(buf, 0, sizeof(buf));
        libnvc::constexpr_func::strcat(buf, prefix);
        libnvc::constexpr_func::strcat(buf, "::"  );
        libnvc::constexpr_func::strcat(buf, name  );
        return libnvc::strid(buf);
    }

    constexpr int reqid(const char req_name)
    {
        return strid("req", req_name);
    }

    constexpr int respid(const char resp_name)
    {
        return strid("resp", resp_name);
    }

    constexpr int notifid(const char notif_name)
    {
        return strid("notif", notif_name);
    }
}

namespace libnvc
{
    template<size_t>   req;
    template<typename> req;

    template<> req<libncv::reqid("nvim_buf_line_count")>
    {
        using parms_t = struct
        {
            int64_t buffer;

            void pack(int64_t msgid)
            {
            }
        };

        using result_t = int64_t;

        constexpr int since() const
        {
            return 1;
        }

        constexpr int deprecated() const
        {
            return 0;
        }

        constexpr auto id() const
        {
            return libnvc::cstr2id("req:nvim_buf_line_count");
        }

        constexpr auto name() const
        {
            return libnvc::id2cstr(id());
        }
    }
}
